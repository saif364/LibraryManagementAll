
what we have ?

-all inputs,file handler too -done
-entity framework core -done
-migration-code first -done
-base controller handle all json reply with status code- done
-tostr -done
-centralise viewbag -done
-dropdown load from chsthml,controller with own list,from db -done
-audit trial
-logging with seq - done
-split one to three layer. navigation,business,repository - done
- base repository for all basic crud  -done
-identity login and logout and register 
-automapper -done 
-middlwire logger for each start end method log write 

-caching
-Asynchronous Programming
-Role-Based Authorization
-JWT Token Authentication
-Email Notifications
-CQRS and MediatR for Command-Query Segregation
-Pagination for Large Data Sets
-Real-time Features with SignalR
-Two-Factor Authentication (2FA)
 






 -dynamic return from controller 
 -minimalistic controller /can be used for api too
 -dynamic audit trial
 -dynamic repository 
 -dynamic service
 -dynamic data transfer from one model to another model- automapper
 -SEQ for error handling

 -its like using jquery but have chance to write js. flexibility 



 case 
	1- basic crud- from controller or web layer
	2- with audit trial and child table - handle from service class
	3- more queries handle from repository layers







